{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mark/weather-app/src/app/%28pages%29/dashboard/page.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { AirQualityData, HourlyForecastData, City } from \"@/lib/types\"; // Ensure 'City' is imported from your types\r\n\r\nexport default function Dashboard() {\r\n  const [city, setCity] = useState(\"Manila\");\r\n  const [weather, setWeather] = useState<HourlyForecastData | null>(null);\r\n  const [airQuality, setAirQuality] = useState<AirQualityData | null>(null);\r\n  const [currentCity, setCurrentCity] = useState<City | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  // Function to convert Unix timestamp to a readable date format\r\n  const convertTimestampToTime = (timestamp: number) => {\r\n    const date = new Date(timestamp * 1000); // Convert to milliseconds\r\n    return date.toLocaleTimeString(); // Returns time in a readable format\r\n  };\r\n\r\n  // Fetch weather and city data from API\r\n  const getWeather = async (cityName: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `http://localhost:5000/get-weather?city=${cityName}`\r\n      );\r\n\r\n      console.log(\"Weather data:\", response.data.current);\r\n      console.log(\"City data:\", response.data.city);\r\n      \r\n      setWeather(response.data.current);\r\n      setAirQuality(response.data.air_pollution.list[0]);\r\n      setCurrentCity(response.data.city); // Set the city data\r\n    } catch (error) {\r\n      console.error(\"Error fetching weather data:\", error);\r\n      setWeather(null);\r\n      setAirQuality(null);\r\n      setCurrentCity(null); // Reset city data if there is an error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch weather data when the city changes\r\n  useEffect(() => {\r\n    getWeather(city);\r\n  }, [city]);\r\n\r\n  return (\r\n    <div\r\n      className={`min-h-screen flex flex-col py-10 px-10 transition-all duration-500 ${\r\n        darkMode ? \"bg-gray-900 text-white\" : \"bg-white text-black\"\r\n      }`}\r\n    >\r\n      <header className=\"mb-8\">\r\n        <h1 className=\"text-4xl font-bold\">Weather Dashboard</h1>\r\n      </header>\r\n\r\n      {/* Render city information */}\r\n      <div>\r\n        {currentCity && (\r\n          <div>\r\n            <h2 className=\"text-2xl\">City: {currentCity.name}</h2>\r\n            <p>Country: {currentCity.country}</p>\r\n            <p>Latitude: {currentCity.coord.lat}</p>\r\n            <p>Longitude: {currentCity.coord.lon}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Render sunrise and sunset times */}\r\n      {weather && weather.sys && (\r\n        <div className=\"mt-4\">\r\n          <h3 className=\"text-xl\">Sunrise and Sunset</h3>\r\n          <p>Sunrise: {convertTimestampToTime(weather.sys.sunrise)}</p>\r\n          <p>Sunset: {convertTimestampToTime(weather.sys.sunset)}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Weather and air quality widgets */}\r\n      <div className=\"w-full flex flex-row gap-4\">\r\n        {airQuality && <AirPollution airQuality={airQuality} className=\"w-96 h-40\" />}\r\n        {/* Add other widgets as needed */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAGe,SAAS;IACtB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA6B;IAClE,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAyB;IACpE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAe;IAC5D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,+DAA+D;IAC/D,MAAM,yBAAyB,CAAC;QAC9B,MAAM,OAAO,IAAI,KAAK,YAAY,OAAO,0BAA0B;QACnE,OAAO,KAAK,kBAAkB,IAAI,oCAAoC;IACxE;IAEA,uCAAuC;IACvC,MAAM,aAAa,OAAO;QACxB,WAAW;QACX,IAAI;YACF,MAAM,WAAW,MAAM,qIAAA,CAAA,UAAK,CAAC,GAAG,CAC9B,CAAC,uCAAuC,EAAE,UAAU;YAGtD,QAAQ,GAAG,CAAC,iBAAiB,SAAS,IAAI,CAAC,OAAO;YAClD,QAAQ,GAAG,CAAC,cAAc,SAAS,IAAI,CAAC,IAAI;YAE5C,WAAW,SAAS,IAAI,CAAC,OAAO;YAChC,cAAc,SAAS,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;YACjD,eAAe,SAAS,IAAI,CAAC,IAAI,GAAG,oBAAoB;QAC1D,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,WAAW;YACX,cAAc;YACd,eAAe,OAAO,uCAAuC;QAC/D,SAAU;YACR,WAAW;QACb;IACF;IAEA,2CAA2C;IAC3C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,WAAW;IACb,GAAG;QAAC;KAAK;IAET,qBACE,8OAAC;QACC,WAAW,CAAC,mEAAmE,EAC7E,WAAW,2BAA2B,uBACtC;;0BAEF,8OAAC;gBAAO,WAAU;0BAChB,cAAA,8OAAC;oBAAG,WAAU;8BAAqB;;;;;;;;;;;0BAIrC,8OAAC;0BACE,6BACC,8OAAC;;sCACC,8OAAC;4BAAG,WAAU;;gCAAW;gCAAO,YAAY,IAAI;;;;;;;sCAChD,8OAAC;;gCAAE;gCAAU,YAAY,OAAO;;;;;;;sCAChC,8OAAC;;gCAAE;gCAAW,YAAY,KAAK,CAAC,GAAG;;;;;;;sCACnC,8OAAC;;gCAAE;gCAAY,YAAY,KAAK,CAAC,GAAG;;;;;;;;;;;;;;;;;;YAMzC,WAAW,QAAQ,GAAG,kBACrB,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAU;;;;;;kCACxB,8OAAC;;4BAAE;4BAAU,uBAAuB,QAAQ,GAAG,CAAC,OAAO;;;;;;;kCACvD,8OAAC;;4BAAE;4BAAS,uBAAuB,QAAQ,GAAG,CAAC,MAAM;;;;;;;;;;;;;0BAKzD,8OAAC;gBAAI,WAAU;0BACZ,4BAAc,8OAAC;oBAAa,YAAY;oBAAY,WAAU;;;;;;;;;;;;;;;;;AAKvE"}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Mark/weather-app/src/app/page.tsx"],"sourcesContent":["import Image from \"next/image\";\nimport Dashboard from \"@/app/(pages)/dashboard/page\"\n\nexport default function Home() {\n  return (\n   <Dashboard/>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;;;AAEe,SAAS;IACtB,qBACC,8OAAC,6IAAA,CAAA,UAAS;;;;;AAEb"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}